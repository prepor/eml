// Generated by BUCKLESCRIPT VERSION 1.2.1 , PLEASE EDIT WITH CARE
'use strict';

var Queue = require("bs-platform/lib/js/queue");
var Task  = require("./task");
var Curry = require("bs-platform/lib/js/curry");

function create() {
  return /* record */[
          /* queue */Queue.create(/* () */0),
          /* current_read : None */0
        ];
}

function read(t) {
  var match = t[/* current_read */1];
  if (match) {
    Curry._1(match[0][1], /* Concurrent_read */307150718);
  }
  try {
    return Queue.take(t[/* queue */0]);
  }
  catch (exn){
    if (exn === Queue.Empty) {
      return Task.create(function (succeed, fail) {
                  t[/* current_read */1] = /* Some */[/* tuple */[
                      succeed,
                      fail
                    ]];
                  return /* () */0;
                });
    }
    else {
      throw exn;
    }
  }
}

function write(t, v) {
  var match = t[/* current_read */1];
  if (match) {
    t[/* current_read */1] = /* None */0;
    return Curry._1(match[0][0], v);
  }
  else {
    return Queue.push(Task.succeed(v), t[/* queue */0]);
  }
}

var Promise = 0;

exports.Promise = Promise;
exports.create  = create;
exports.read    = read;
exports.write   = write;
/* No side effect */
