// Generated by BUCKLESCRIPT VERSION 1.2.1 , PLEASE EDIT WITH CARE
'use strict';

var Block  = require("bs-platform/lib/js/block");
var Curry  = require("bs-platform/lib/js/curry");
var List   = require("bs-platform/lib/js/list");
var Result = require("./result");

function realize(i, v) {
  var match = i[/* state */0];
  if (match) {
    return /* () */0;
  }
  else {
    i[/* state */0] = /* Realized */[v];
    return List.iter(function (f) {
                return Curry._1(f, v);
              }, i[/* readers */1]);
  }
}

function create(f) {
  var i = /* record */[
    /* state : Pending */0,
    /* readers : [] */0
  ];
  Curry._1(f, function (param) {
        return realize(i, param);
      });
  return i;
}

function set_reader(i, f) {
  var match = i[/* state */0];
  if (match) {
    return Curry._1(f, match[0]);
  }
  else {
    i[/* readers */1] = /* :: */[
      f,
      i[/* readers */1]
    ];
    return /* () */0;
  }
}

function connect(i, i$prime) {
  return set_reader(i, function (param) {
              return realize(i$prime, param);
            });
}

function bind(i, f) {
  var i$prime = /* record */[
    /* state : Pending */0,
    /* readers : [] */0
  ];
  var match = i[/* state */0];
  if (match) {
    var i$1 = Curry._1(f, match[0]);
    set_reader(i$1, function (param) {
          return realize(i$prime, param);
        });
  }
  else {
    i[/* readers */1] = /* :: */[
      function (v) {
        var i = Curry._1(f, v);
        return set_reader(i, function (param) {
                    return realize(i$prime, param);
                  });
      },
      i[/* readers */1]
    ];
  }
  return i$prime;
}

function realized(v) {
  return /* record */[
          /* state : Realized */[v],
          /* readers : [] */0
        ];
}

var Ivar = /* module */[
  /* realize */realize,
  /* create */create,
  /* set_reader */set_reader,
  /* connect */connect,
  /* bind */bind,
  /* realized */realized
];

function create$1(f) {
  return /* record */[/* state */create(function (realize) {
                return Curry._2(f, function (v) {
                            return Curry._1(realize, Result.ok(v));
                          }, function (v) {
                            return Curry._1(realize, Result.err(v));
                          });
              })];
}

function bind$1(t, f) {
  return /* record */[/* state */bind(t[/* state */0], function (param) {
                if (param.tag) {
                  return /* record */[
                          /* state : Realized */[/* Error */Block.__(1, [param[0]])],
                          /* readers : [] */0
                        ];
                }
                else {
                  return Curry._1(f, param[0])[/* state */0];
                }
              })];
}

function succeed(v) {
  var v$1 = Result.ok(v);
  return /* record */[/* state : record */[
            /* state : Realized */[v$1],
            /* readers : [] */0
          ]];
}

function fail(v) {
  var v$1 = Result.err(v);
  return /* record */[/* state : record */[
            /* state : Realized */[v$1],
            /* readers : [] */0
          ]];
}

var $great$great$eq = bind$1;

exports.Ivar            = Ivar;
exports.create          = create$1;
exports.bind            = bind$1;
exports.$great$great$eq = $great$great$eq;
exports.succeed         = succeed;
exports.fail            = fail;
/* No side effect */
