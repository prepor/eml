// Generated by BUCKLESCRIPT VERSION 1.2.1 , PLEASE EDIT WITH CARE
'use strict';

var Html       = require("./html");
var Program    = require("./program");
var Pervasives = require("bs-platform/lib/js/pervasives");
var Block      = require("bs-platform/lib/js/block");
var Json       = require("./json");
var Curry      = require("bs-platform/lib/js/curry");
var Printf     = require("bs-platform/lib/js/printf");
var List       = require("bs-platform/lib/js/list");

var empty_model = /* record */[
  /* entries : [] */0,
  /* field */"",
  /* uid */0,
  /* visibility */"All"
];

function new_entry(description, id) {
  return /* record */[
          /* description */description,
          /* completed : false */0,
          /* editing : false */0,
          /* id */id
        ];
}

function update(model, param) {
  if (typeof param === "number") {
    if (param !== 66368548) {
      if (param >= 870523874) {
        return model;
      }
      else {
        return /* record */[
                /* entries */model[/* field */1] === "" ? model[/* entries */0] : Pervasives.$at(model[/* entries */0], /* :: */[
                        new_entry(model[/* field */1], model[/* uid */2]),
                        /* [] */0
                      ]),
                /* field */"",
                /* uid */model[/* uid */2] + 1 | 0,
                /* visibility */model[/* visibility */3]
              ];
      }
    }
    else {
      return /* record */[
              /* entries */List.filter(function (v) {
                      return !v[/* completed */1];
                    })(model[/* entries */0]),
              /* field */model[/* field */1],
              /* uid */model[/* uid */2],
              /* visibility */model[/* visibility */3]
            ];
    }
  }
  else {
    var variant = param[0];
    if (variant >= 110002521) {
      if (variant >= 527250507) {
        if (variant >= 978418057) {
          var match = param[1];
          var description = match[1];
          var id = match[0];
          var update_entry = function (t) {
            if (t[/* id */3] === id) {
              return /* record */[
                      /* description */description,
                      /* completed */t[/* completed */1],
                      /* editing */t[/* editing */2],
                      /* id */t[/* id */3]
                    ];
            }
            else {
              return t;
            }
          };
          return /* record */[
                  /* entries */List.map(update_entry, model[/* entries */0]),
                  /* field */model[/* field */1],
                  /* uid */model[/* uid */2],
                  /* visibility */model[/* visibility */3]
                ];
        }
        else {
          var id$1 = param[1];
          return /* record */[
                  /* entries */List.filter(function (v) {
                          return +(v[/* id */3] !== id$1);
                        })(model[/* entries */0]),
                  /* field */model[/* field */1],
                  /* uid */model[/* uid */2],
                  /* visibility */model[/* visibility */3]
                ];
        }
      }
      else if (variant >= 164173914) {
        var match$1 = param[1];
        var editing = match$1[1];
        var id$2 = match$1[0];
        var update_entry$1 = function (t) {
          if (t[/* id */3] === id$2) {
            return /* record */[
                    /* description */t[/* description */0],
                    /* completed */t[/* completed */1],
                    /* editing */editing,
                    /* id */t[/* id */3]
                  ];
          }
          else {
            return t;
          }
        };
        return /* record */[
                /* entries */List.map(update_entry$1, model[/* entries */0]),
                /* field */model[/* field */1],
                /* uid */model[/* uid */2],
                /* visibility */model[/* visibility */3]
              ];
      }
      else {
        var completed = param[1];
        var update_entry$2 = function (t) {
          return /* record */[
                  /* description */t[/* description */0],
                  /* completed */completed,
                  /* editing */t[/* editing */2],
                  /* id */t[/* id */3]
                ];
        };
        return /* record */[
                /* entries */List.map(update_entry$2, model[/* entries */0]),
                /* field */model[/* field */1],
                /* uid */model[/* uid */2],
                /* visibility */model[/* visibility */3]
              ];
      }
    }
    else if (variant !== -656144216) {
      if (variant >= -105231486) {
        return /* record */[
                /* entries */model[/* entries */0],
                /* field */model[/* field */1],
                /* uid */model[/* uid */2],
                /* visibility */param[1]
              ];
      }
      else {
        return /* record */[
                /* entries */model[/* entries */0],
                /* field */param[1],
                /* uid */model[/* uid */2],
                /* visibility */model[/* visibility */3]
              ];
      }
    }
    else {
      var match$2 = param[1];
      var completed$1 = match$2[1];
      var id$3 = match$2[0];
      var update_entry$3 = function (t) {
        if (t[/* id */3] === id$3) {
          return /* record */[
                  /* description */t[/* description */0],
                  /* completed */completed$1,
                  /* editing */t[/* editing */2],
                  /* id */t[/* id */3]
                ];
        }
        else {
          return t;
        }
      };
      return /* record */[
              /* entries */List.map(update_entry$3, model[/* entries */0]),
              /* field */model[/* field */1],
              /* uid */model[/* uid */2],
              /* visibility */model[/* visibility */3]
            ];
    }
  }
}

function onEnter(msg) {
  var tagger = function (param) {
    if (param !== 13) {
      return /* NoOp */870523874;
    }
    else {
      return msg;
    }
  };
  return Html.on("keydown", Curry._2(Json.Decoder[/* map */14], tagger, Html.keyCode));
}

var info_footer = Html.footer(/* :: */[
      Html.className("info"),
      /* [] */0
    ], /* :: */[
      Html.p(/* [] */0, /* :: */[
            function (param) {
              return Html.text("Double-click to edit a todo", param);
            },
            /* [] */0
          ]),
      /* :: */[
        Html.p(/* [] */0, /* :: */[
              function (param) {
                return Html.text("Written by ", param);
              },
              /* :: */[
                Html.a(/* :: */[
                      Html.href("https://github.com/prepor"),
                      /* [] */0
                    ], /* :: */[
                      function (param) {
                        return Html.text("Andrew Rudenko", param);
                      },
                      /* [] */0
                    ]),
                /* [] */0
              ]
            ]),
        /* :: */[
          Html.p(/* [] */0, /* :: */[
                function (param) {
                  return Html.text("Part of ", param);
                },
                /* :: */[
                  Html.a(/* :: */[
                        Html.href("http://todomvc.com"),
                        /* [] */0
                      ], /* :: */[
                        function (param) {
                          return Html.text("TodoMVC", param);
                        },
                        /* [] */0
                      ]),
                  /* [] */0
                ]
              ]),
          /* [] */0
        ]
      ]
    ]);

function view_controls_count(entries_left) {
  var item = entries_left === 1 ? " item" : " items";
  var partial_arg = Pervasives.string_of_int(entries_left);
  var partial_arg$1 = item + " left";
  return Html.span(/* :: */[
              Html.className("todo-count"),
              /* [] */0
            ], /* :: */[
              Html.strong(/* [] */0, /* :: */[
                    function (param) {
                      return Html.text(partial_arg, param);
                    },
                    /* [] */0
                  ]),
              /* :: */[
                function (param) {
                  return Html.text(partial_arg$1, param);
                },
                /* [] */0
              ]
            ]);
}

function view_controls_clear(entries_completed) {
  var partial_arg = Curry._1(Printf.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "Clear completed (",
                /* Int */Block.__(4, [
                    /* Int_i */3,
                    /* No_padding */0,
                    /* No_precision */0,
                    /* Char_literal */Block.__(12, [
                        /* ")" */41,
                        /* End_of_format */0
                      ])
                  ])
              ]),
            "Clear completed (%i)"
          ]), entries_completed);
  return Html.button(/* :: */[
              Html.className("clear-completed"),
              /* :: */[
                Html.hidden(+(entries_completed === 0)),
                /* :: */[
                  Html.onClick(/* DeleteComplete */66368548),
                  /* [] */0
                ]
              ]
            ], /* :: */[
              function (param) {
                return Html.text(partial_arg, param);
              },
              /* [] */0
            ]);
}

function visibility_swap(uri, visibility, actual_visibility) {
  return Html.li(/* :: */[
              Html.onClick(/* `ChangeVisibility */[
                    -105231486,
                    visibility
                  ]),
              /* [] */0
            ], /* :: */[
              Html.a(/* :: */[
                    Html.href(uri),
                    /* :: */[
                      Html.classList(/* :: */[
                            /* tuple */[
                              "selected",
                              +(visibility === actual_visibility)
                            ],
                            /* [] */0
                          ]),
                      /* [] */0
                    ]
                  ], /* :: */[
                    function (param) {
                      return Html.text(visibility, param);
                    },
                    /* [] */0
                  ]),
              /* [] */0
            ]);
}

function view_controls_filters(visibility) {
  return Html.ul(/* :: */[
              Html.className("filters"),
              /* [] */0
            ], /* :: */[
              visibility_swap("#/", "All", visibility),
              /* :: */[
                function (param) {
                  return Html.text(" ", param);
                },
                /* :: */[
                  visibility_swap("#/", "Active", visibility),
                  /* :: */[
                    function (param) {
                      return Html.text(" ", param);
                    },
                    /* :: */[
                      visibility_swap("#/", "Completed", visibility),
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function view_controls(visibility, entries) {
  var entries_completed = List.length(List.filter(function (v) {
              return v[/* completed */1];
            })(entries));
  var entries_left = List.length(entries) - entries_completed | 0;
  return Html.footer(/* :: */[
              Html.className("footer"),
              /* :: */[
                Html.hidden(+(List.length(entries) === 0)),
                /* [] */0
              ]
            ], /* :: */[
              view_controls_count(entries_left),
              /* :: */[
                view_controls_filters(visibility),
                /* :: */[
                  view_controls_clear(entries_completed),
                  /* [] */0
                ]
              ]
            ]);
}

function view_entry(todo) {
  var partial_arg = todo[/* description */0];
  return Html.li(/* :: */[
              Html.classList(/* :: */[
                    /* tuple */[
                      "completed",
                      todo[/* completed */1]
                    ],
                    /* :: */[
                      /* tuple */[
                        "editing",
                        todo[/* editing */2]
                      ],
                      /* [] */0
                    ]
                  ]),
              /* [] */0
            ], /* :: */[
              Html.div(/* :: */[
                    Html.className("view"),
                    /* [] */0
                  ], /* :: */[
                    Html.input(/* :: */[
                          Html.className("toggle"),
                          /* :: */[
                            Html.type$prime("checkbox"),
                            /* :: */[
                              Html.checked(todo[/* completed */1]),
                              /* :: */[
                                Html.onClick(/* `Check */[
                                      -656144216,
                                      /* tuple */[
                                        todo[/* id */3],
                                        !todo[/* completed */1]
                                      ]
                                    ]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ], /* [] */0),
                    /* :: */[
                      Html.label(/* :: */[
                            Html.onDoubleClick(/* `EditingEntry */[
                                  164173914,
                                  /* tuple */[
                                    todo[/* id */3],
                                    /* true */1
                                  ]
                                ]),
                            /* [] */0
                          ], /* :: */[
                            function (param) {
                              return Html.text(partial_arg, param);
                            },
                            /* [] */0
                          ]),
                      /* :: */[
                        Html.button(/* :: */[
                              Html.className("destroy"),
                              /* :: */[
                                Html.onClick(/* `Delete */[
                                      527250507,
                                      todo[/* id */3]
                                    ]),
                                /* [] */0
                              ]
                            ], /* [] */0),
                        /* [] */0
                      ]
                    ]
                  ]),
              /* :: */[
                Html.input(/* :: */[
                      Html.className("edit"),
                      /* :: */[
                        Html.value(todo[/* description */0]),
                        /* :: */[
                          Html.name("title"),
                          /* :: */[
                            Html.id("todo-" + Pervasives.string_of_int(todo[/* id */3])),
                            /* :: */[
                              Html.onInput(function (v) {
                                    return /* `UpdateEntry */[
                                            978418057,
                                            /* tuple */[
                                              todo[/* id */3],
                                              v
                                            ]
                                          ];
                                  }),
                              /* :: */[
                                Html.onBlur(/* `EditingEntry */[
                                      164173914,
                                      /* tuple */[
                                        todo[/* id */3],
                                        /* false */0
                                      ]
                                    ]),
                                /* :: */[
                                  onEnter(/* `EditingEntry */[
                                        164173914,
                                        /* tuple */[
                                          todo[/* id */3],
                                          /* false */0
                                        ]
                                      ]),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ], /* [] */0),
                /* [] */0
              ]
            ]);
}

function view_input(task) {
  return Html.header(/* :: */[
              Html.className("header"),
              /* [] */0
            ], /* :: */[
              Html.h1(/* [] */0, /* :: */[
                    function (param) {
                      return Html.text("todos", param);
                    },
                    /* [] */0
                  ]),
              /* :: */[
                Html.input(/* :: */[
                      Html.className("new-todo"),
                      /* :: */[
                        Html.placeholder("What needs to be done?"),
                        /* :: */[
                          Html.autofocus(/* true */1),
                          /* :: */[
                            Html.value(task),
                            /* :: */[
                              Html.name("newTodo"),
                              /* :: */[
                                Html.onInput(function (v) {
                                      return /* `UpdateField */[
                                              -899770927,
                                              v
                                            ];
                                    }),
                                /* :: */[
                                  onEnter(/* Add */3254785),
                                  /* [] */0
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ], /* [] */0),
                /* [] */0
              ]
            ]);
}

function view_entries(visibility, entries) {
  var list_all = function (f, l) {
    return List.fold_left(function (_, v) {
                if (Curry._1(f, v)) {
                  return /* true */1;
                }
                else {
                  return /* false */0;
                }
              }, /* true */1, l);
  };
  var is_visible = function (todo) {
    switch (visibility) {
      case "Active" : 
          return !todo[/* completed */1];
      case "Completed" : 
          return todo[/* completed */1];
      default:
        return /* true */1;
    }
  };
  var all_completed = list_all(function (v) {
        return v[/* completed */1];
      }, entries);
  var css_visibility = entries ? "visible" : "hidden";
  return Html.section(/* :: */[
              Html.className("main"),
              /* :: */[
                Html.style(/* :: */[
                      /* tuple */[
                        "visibility",
                        css_visibility
                      ],
                      /* [] */0
                    ]),
                /* [] */0
              ]
            ], /* :: */[
              Html.input(/* :: */[
                    Html.className("toggle-all"),
                    /* :: */[
                      Html.type$prime("checkbox"),
                      /* :: */[
                        Html.name("toggle"),
                        /* :: */[
                          Html.checked(all_completed),
                          /* :: */[
                            Html.onClick(/* `CheckAll */[
                                  110002521,
                                  !all_completed
                                ]),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ], /* [] */0),
              /* :: */[
                Html.label(/* :: */[
                      Html.for$prime("toggle-all"),
                      /* [] */0
                    ], /* :: */[
                      function (param) {
                        return Html.text("Mark all as complete", param);
                      },
                      /* [] */0
                    ]),
                /* :: */[
                  Html.ul(/* :: */[
                        Html.className("todo-list"),
                        /* [] */0
                      ], List.map(view_entry, List.filter(is_visible)(entries))),
                  /* [] */0
                ]
              ]
            ]);
}

function view(model) {
  return Html.div(/* :: */[
              Html.className("todomvc-wrapper"),
              /* [] */0
            ], /* :: */[
              Html.section(/* :: */[
                    Html.className("todoapp"),
                    /* [] */0
                  ], /* :: */[
                    view_input(model[/* field */1]),
                    /* :: */[
                      view_entries(model[/* visibility */3], model[/* entries */0]),
                      /* :: */[
                        view_controls(model[/* visibility */3], model[/* entries */0]),
                        /* [] */0
                      ]
                    ]
                  ]),
              /* :: */[
                info_footer,
                /* [] */0
              ]
            ]);
}

var View = /* module */[
  /* onEnter */onEnter,
  /* info_footer */info_footer,
  /* view_controls_count */view_controls_count,
  /* view_controls_clear */view_controls_clear,
  /* visibility_swap */visibility_swap,
  /* view_controls_filters */view_controls_filters,
  /* view_controls */view_controls,
  /* view_entry */view_entry,
  /* view_input */view_input,
  /* view_entries */view_entries,
  /* view */view
];

function start(dom_id) {
  return Program.simple(dom_id, empty_model, view, update);
}

var init = empty_model;

exports.empty_model = empty_model;
exports.new_entry   = new_entry;
exports.init        = init;
exports.update      = update;
exports.View        = View;
exports.view        = view;
exports.start       = start;
/* info_footer Not a pure module */
