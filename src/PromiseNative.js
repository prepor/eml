// Generated by BUCKLESCRIPT VERSION 1.2.1 , PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block");
var Curry = require("bs-platform/lib/js/curry");
var List  = require("bs-platform/lib/js/list");

function resolve$prime(p, v) {
  var match = p[/* state */0];
  if (typeof match === "number") {
    console.log("---RESOLVE");
    p[/* state */0] = /* Fullfilled */Block.__(0, [v]);
    return List.iter(function (f) {
                return Curry._1(f, v);
              }, p[/* fullfilled_clbs */1]);
  }
  else {
    return /* () */0;
  }
}

function reject$prime(p, v) {
  var match = p[/* state */0];
  if (typeof match === "number") {
    p[/* state */0] = /* Rejected */Block.__(1, [v]);
    return List.iter(function (f) {
                return Curry._1(f, v);
              }, p[/* rejected_clbs */2]);
  }
  else {
    return /* () */0;
  }
}

function create(f) {
  var p = /* record */[
    /* state : Pending */0,
    /* fullfilled_clbs : [] */0,
    /* rejected_clbs : [] */0
  ];
  Curry._2(f, function (param) {
        return resolve$prime(p, param);
      }, function (param) {
        return reject$prime(p, param);
      });
  return p;
}

function connect(p, p$prime) {
  var p$1 = p;
  var onFullfill = function (param) {
    return resolve$prime(p$prime, param);
  };
  var onReject = function (param) {
    return reject$prime(p$prime, param);
  };
  var match = p$1[/* state */0];
  if (typeof match === "number") {
    p$1[/* fullfilled_clbs */1] = /* :: */[
      onFullfill,
      p$1[/* fullfilled_clbs */1]
    ];
    p$1[/* rejected_clbs */2] = /* :: */[
      onReject,
      p$1[/* rejected_clbs */2]
    ];
    return /* () */0;
  }
  else if (match.tag) {
    return Curry._1(onReject, match[0]);
  }
  else {
    return Curry._1(onFullfill, match[0]);
  }
}

function then_(p, clb) {
  var p$prime = /* record */[
    /* state : Pending */0,
    /* fullfilled_clbs : [] */0,
    /* rejected_clbs : [] */0
  ];
  var match = p[/* state */0];
  if (typeof match === "number") {
    p[/* fullfilled_clbs */1] = /* :: */[
      function (v) {
        return connect(Curry._1(clb, v), p$prime);
      },
      p[/* fullfilled_clbs */1]
    ];
  }
  else if (!match.tag) {
    connect(Curry._1(clb, match[0]), p$prime);
  }
  return p$prime;
}

function resolve(v) {
  return /* record */[
          /* state : Fullfilled */Block.__(0, [v]),
          /* fullfilled_clbs : [] */0,
          /* rejected_clbs : [] */0
        ];
}

function thenValue(p, clb) {
  return then_(p, function (v) {
              return resolve(Curry._1(clb, v));
            });
}

function $$catch(p, clb) {
  var p$prime = /* record */[
    /* state : Pending */0,
    /* fullfilled_clbs : [] */0,
    /* rejected_clbs : [] */0
  ];
  var match = p[/* state */0];
  if (typeof match === "number") {
    p[/* rejected_clbs */2] = /* :: */[
      function (v) {
        return connect(Curry._1(clb, v), p$prime);
      },
      p[/* rejected_clbs */2]
    ];
  }
  else if (match.tag) {
    connect(Curry._1(clb, match[0]), p$prime);
  }
  return p$prime;
}

function reject(v) {
  return /* record */[
          /* state : Rejected */Block.__(1, [v]),
          /* fullfilled_clbs : [] */0,
          /* rejected_clbs : [] */0
        ];
}

function catchValue(p, clb) {
  return $$catch(p, function (v) {
              return reject(Curry._1(clb, v));
            });
}

function all(ps) {
  var wait = function (acc, param) {
    if (param) {
      var ps = param[1];
      var p = param[0];
      then_(p, function (v) {
            return wait(/* :: */[
                        v,
                        acc
                      ], ps);
          });
      return $$catch(p, reject);
    }
    else {
      return resolve(acc);
    }
  };
  return wait(/* [] */0, ps);
}

function race(ps) {
  return create(function (resolve, reject) {
              List.iter(function (p) {
                    thenValue(p, resolve);
                    return /* () */0;
                  }, ps);
              return List.iter(function (p) {
                          catchValue(p, reject);
                          return /* () */0;
                        }, ps);
            });
}

var $great$great$eq = then_;

var $great$great$pipe = thenValue;

var $great$great$unknown = $$catch;

var $great$great$pipe$unknown = catchValue;

exports.then_                     = then_;
exports.$great$great$eq           = $great$great$eq;
exports.thenValue                 = thenValue;
exports.$great$great$pipe         = $great$great$pipe;
exports.$$catch                   = $$catch;
exports.$great$great$unknown      = $great$great$unknown;
exports.catchValue                = catchValue;
exports.$great$great$pipe$unknown = $great$great$pipe$unknown;
exports.resolve                   = resolve;
exports.reject                    = reject;
exports.all                       = all;
exports.race                      = race;
exports.create                    = create;
/* No side effect */
